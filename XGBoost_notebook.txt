#Hamming Distance: A value between 0 and 1 that indicates the fraction of mismatches between y_pred and y_test.
# d(x,y) = suma de la i=1 la n unde [xi!=yi]

distanta_hamming=numarul de predictii gresite/numarul total de exemple din setul de test

y_test
Definition: y_test contains the true labels of your test dataset.
Source: It comes from the ground truth of your dataset after extracting features using the feature extractor.

y_pred
Definition: y_pred contains the predicted labels produced by your XGBoost model.
Source: It's generated by making predictions on the extracted test set features.

Example:

A 64x64 image may lose fine details, making it harder to distinguish between similar objects.
A 128x128 image preserves more structure, making it easier for the CNN to learn differences.


IMAGE_SIZE=(64,64)

optimizer=adam

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='mlogloss', max_depth=7, learning_rate=0.1) Accuracy: 0.7537993920972644, Hamming Distance: 0.24620060790273557

xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='mlogloss', max_depth=7, learning_rate=0.1) Accuracy: 0.790273556231003, Hamming Distance: 0.20972644376899696

xgb_model = xgb.XGBClassifier(n_estimators=50, eval_metric='mlogloss', max_depth=7, learning_rate=0.1) Accuracy: 0.662613981762918, Hamming Distance: 0.3373860182370821

xgb_model = xgb.XGBClassifier(n_estimators=50, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.7112462006079028, Hamming Distance: 0.2887537993920973

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.7142857142857143, Hamming Distance: 0.2857142857142857

xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.729483282674772, Hamming Distance: 0.270516717325228

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='mlogloss', max_depth=5, learning_rate=0.1) Accuracy: 0.7203647416413373, Hamming Distance: 0.2796352583586626

xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='mlogloss', max_depth=5, learning_rate=0.1) Accuracy: 0.7446808510638298, Hamming Distance: 0.2553191489361702

xgb_model = xgb.XGBClassifier(n_estimators=50, eval_metric='mlogloss', max_depth=5, learning_rate=0.1) Accuracy: 0.7264437689969605, Hamming Distance: 0.2735562310030395

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='aucpr', max_depth=7, learning_rate=0.1) Accuracy: 0.7173252279635258, Hamming Distance: 0.2826747720364742



optimizer=sgd

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='mlogloss', max_depth=7, learning_rate=0.1) Accuracy: 0.5075987841945289, Hamming Distance: 0.49240121580547114

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.5106382978723404, Hamming Distance: 0.48936170212765956


optimizer=nadam

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='aucpr', max_depth=7, learning_rate=0.1) Accuracy: 0.7142857142857143, Hamming Distance: 0.2857142857142857

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='mlogloss', max_depth=7, learning_rate=0.1) Accuracy: 0.7051671732522796, Hamming Distance: 0.2948328267477204

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.7416413373860182, Hamming Distance: 0.25835866261398177

xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='merror', max_depth=7, learning_rate=0.1) Accuracy: 0.7416413373860182, Hamming Distance: 0.25835866261398177

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=10, learning_rate=0.1) Accuracy: 0.7355623100303952, Hamming Distance: 0.26443768996960487

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=5, learning_rate=0.12) Accuracy: 0.7264437689969605, Hamming Distance: 0.2735562310030395

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=10, learning_rate=0.12) Accuracy: 0.7173252279635258, Hamming Distance: 0.2826747720364742

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=10, learning_rate=0.07) Accuracy: 0.756838905775076, Hamming Distance: 0.24316109422492402

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.05) Accuracy: 0.7021276595744681, Hamming Distance: 0.2978723404255319


IMAGE_SIZE=(128,128) optimizer=nadam

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.05) Accuracy: 0.8054711246200608, Hamming Distance: 0.1945288753799392

xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.07) Accuracy: 0.7933130699088146, Hamming Distance: 0.2066869300911854

BATCH_SIZE=128 xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.07) Accuracy: 0.6534954407294833, Hamming Distance: 0.3465045592705167

Unormalized datasets xgb_model = xgb.XGBClassifier(n_estimators=100, eval_metric='merror', max_depth=7, learning_rate=0.07)Accuracy: 0.574468085106383,Hamming Distance: 0.425531914893617

xgb_model = xgb.XGBClassifier(n_estimators=200, eval_metric='merror', max_depth=7, learning_rate=0.07) Accuracy: 0.8297872340425532, Hamming Distance: 0.1702127659574468